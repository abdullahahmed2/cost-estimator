{"ast":null,"code":"var _jsxFileName = \"/Users/abdullahahmed/Desktop/Cost-Estimator/Frontend/src/ResultsTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  projectData\n}) {\n  _s();\n  const [tasks, setTasks] = useState(projectData.tasks || []);\n  const [editingRow, setEditingRow] = useState({}); // Track which row is being edited\n  const [errors, setErrors] = useState({}); // Track errors for validation\n  const [hourlyRate, setHourlyRate] = useState(0); // Hourly rate for calculations\n\n  // Calculate total hours\n  const totalHours = tasks.reduce((sum, task) => sum + task.subtasks.reduce((subSum, subtask) => subSum + Number(subtask.hours || 0), 0), 0);\n\n  // Handle input changes during editing\n  const handleChange = (taskIndex, subtaskIndex, field, value) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n    setTasks(updatedTasks);\n  };\n\n  // Handle save action for a specific row\n  const handleSave = () => {\n    const {\n      taskIndex,\n      subtaskIndex\n    } = editingRow;\n    const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n    // Validate input\n    if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n      setErrors({\n        taskIndex,\n        subtaskIndex,\n        message: 'Subtask name cannot be empty, and hours must be a positive number.'\n      });\n      return;\n    }\n\n    // Clear errors and exit editing mode\n    setErrors({});\n    setEditingRow({});\n  };\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Project Task Details', 14, 20);\n    const tableData = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      tableData.push([task, '', '', '']);\n      subtasks.forEach(({\n        subtask,\n        hours,\n        comments\n      }) => {\n        tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n      });\n    });\n\n    // Add summary rows\n    tableData.push(['', 'Total No. of Hours', `${totalHours} hours`, '']);\n    tableData.push(['', 'Hourly Rate', `$${hourlyRate}`, '']);\n    tableData.push(['', 'Total Cost', `$${(totalHours * hourlyRate).toFixed(2)}`, '']);\n    autoTable(doc, {\n      head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n      body: tableData,\n      startY: 30,\n      margin: {\n        left: 14,\n        right: 14\n      },\n      headStyles: {\n        fillColor: [41, 128, 185],\n        textColor: 255\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      }\n    });\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const docContent = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      docContent.push(new Paragraph({\n        text: task,\n        heading: 'Heading2',\n        spacing: {\n          after: 200\n        }\n      }));\n      const subtaskRows = subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: subtask,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `${hours} hours`,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: comments || 'N/A',\n            alignment: 'center'\n          })]\n        })]\n      }));\n      const table = new Table({\n        rows: [new TableRow({\n          children: [new TableCell({\n            children: [new Paragraph({\n              text: 'Subtask',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Development Hours',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Comments',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          })]\n        }), ...subtaskRows],\n        width: {\n          size: 100,\n          type: 'pct'\n        }\n      });\n      docContent.push(table);\n    });\n\n    // Add summary\n    docContent.push(new Paragraph({\n      text: `Total No. of Hours: ${totalHours}`,\n      spacing: {\n        after: 200\n      }\n    }), new Paragraph({\n      text: `Hourly Rate: $${hourlyRate}`,\n      spacing: {\n        after: 200\n      }\n    }), new Paragraph({\n      text: `Total Cost: $${(totalHours * hourlyRate).toFixed(2)}`,\n      spacing: {\n        after: 200\n      }\n    }));\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1',\n          spacing: {\n            after: 300\n          }\n        }), ...docContent]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Project Task Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Development Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map((taskItem, taskIndex) => taskItem.subtasks.map((subtask, subIndex) => {\n          const isEditing = editingRow.taskIndex === taskIndex && editingRow.subtaskIndex === subIndex;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"hover-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: subIndex === 0 ? taskItem.task : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: subtask.subtask,\n                onChange: e => handleChange(taskIndex, subIndex, 'subtask', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 45\n              }, this) : subtask.subtask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: subtask.hours,\n                onChange: e => handleChange(taskIndex, subIndex, 'hours', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 45\n              }, this) : `${subtask.hours} hours`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: subtask.comments,\n                onChange: e => handleChange(taskIndex, subIndex, 'comments', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 45\n              }, this) : subtask.comments || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"edit-icon-cell\",\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save-button\",\n                onClick: handleSave,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"edit-icon\",\n                onClick: () => setEditingRow({\n                  taskIndex,\n                  subtaskIndex: subIndex\n                }),\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 37\n            }, this)]\n          }, `${taskIndex}-${subIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 33\n          }, this);\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n_s(ResultsTable, \"TPiq2MXHGENNXYRfg1s5dK5AjoE=\");\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","useState","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","jsxDEV","_jsxDEV","ResultsTable","projectData","_s","tasks","setTasks","editingRow","setEditingRow","errors","setErrors","hourlyRate","setHourlyRate","totalHours","reduce","sum","task","subtasks","subSum","subtask","Number","hours","handleChange","taskIndex","subtaskIndex","field","value","updatedTasks","handleSave","isNaN","message","exportToPDF","doc","text","tableData","forEach","push","comments","toFixed","head","body","startY","margin","left","right","headStyles","fillColor","textColor","alternateRowStyles","save","exportToDOCX","docContent","heading","spacing","after","subtaskRows","map","children","alignment","table","rows","bold","shading","fill","width","size","type","sections","toBlob","then","blob","className","fileName","_jsxFileName","lineNumber","columnNumber","taskItem","subIndex","isEditing","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/abdullahahmed/Desktop/Cost-Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\n\nfunction ResultsTable({ projectData }) {\n    const [tasks, setTasks] = useState(projectData.tasks || []);\n    const [editingRow, setEditingRow] = useState({}); // Track which row is being edited\n    const [errors, setErrors] = useState({}); // Track errors for validation\n    const [hourlyRate, setHourlyRate] = useState(0); // Hourly rate for calculations\n\n    // Calculate total hours\n    const totalHours = tasks.reduce(\n        (sum, task) =>\n            sum + task.subtasks.reduce((subSum, subtask) => subSum + Number(subtask.hours || 0), 0),\n        0\n    );\n\n    // Handle input changes during editing\n    const handleChange = (taskIndex, subtaskIndex, field, value) => {\n        const updatedTasks = [...tasks];\n        updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n        setTasks(updatedTasks);\n    };\n\n    // Handle save action for a specific row\n    const handleSave = () => {\n        const { taskIndex, subtaskIndex } = editingRow;\n        const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n        // Validate input\n        if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n            setErrors({\n                taskIndex,\n                subtaskIndex,\n                message: 'Subtask name cannot be empty, and hours must be a positive number.',\n            });\n            return;\n        }\n\n        // Clear errors and exit editing mode\n        setErrors({});\n        setEditingRow({});\n    };\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.text('Project Task Details', 14, 20);\n\n        const tableData = [];\n        tasks.forEach(({ task, subtasks }) => {\n            tableData.push([task, '', '', '']);\n            subtasks.forEach(({ subtask, hours, comments }) => {\n                tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n            });\n        });\n\n        // Add summary rows\n        tableData.push(['', 'Total No. of Hours', `${totalHours} hours`, '']);\n        tableData.push(['', 'Hourly Rate', `$${hourlyRate}`, '']);\n        tableData.push(['', 'Total Cost', `$${(totalHours * hourlyRate).toFixed(2)}`, '']);\n\n        autoTable(doc, {\n            head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n            body: tableData,\n            startY: 30,\n            margin: { left: 14, right: 14 },\n            headStyles: { fillColor: [41, 128, 185], textColor: 255 },\n            alternateRowStyles: { fillColor: [240, 240, 240] },\n        });\n\n        doc.save('Project_Estimates.pdf');\n    };\n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const docContent = [];\n\n        tasks.forEach(({ task, subtasks }) => {\n            docContent.push(\n                new Paragraph({\n                    text: task,\n                    heading: 'Heading2',\n                    spacing: { after: 200 },\n                })\n            );\n\n            const subtaskRows = subtasks.map(({ subtask, hours, comments }) =>\n                new TableRow({\n                    children: [\n                        new TableCell({\n                            children: [new Paragraph({ text: subtask, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: `${hours} hours`, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: comments || 'N/A', alignment: 'center' })],\n                        }),\n                    ],\n                })\n            );\n\n            const table = new Table({\n                rows: [\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Subtask', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Development Hours', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Comments', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                        ],\n                    }),\n                    ...subtaskRows,\n                ],\n                width: { size: 100, type: 'pct' },\n            });\n\n            docContent.push(table);\n        });\n\n        // Add summary\n        docContent.push(\n            new Paragraph({\n                text: `Total No. of Hours: ${totalHours}`,\n                spacing: { after: 200 },\n            }),\n            new Paragraph({\n                text: `Hourly Rate: $${hourlyRate}`,\n                spacing: { after: 200 },\n            }),\n            new Paragraph({\n                text: `Total Cost: $${(totalHours * hourlyRate).toFixed(2)}`,\n                spacing: { after: 200 },\n            })\n        );\n\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({\n                            text: 'Project Task Details',\n                            heading: 'Heading1',\n                            spacing: { after: 300 },\n                        }),\n                        ...docContent,\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div className=\"results-table\">\n            <h3>Project Task Details</h3>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Subtask</th>\n                        <th>Development Hours</th>\n                        <th>Comments</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((taskItem, taskIndex) =>\n                        taskItem.subtasks.map((subtask, subIndex) => {\n                            const isEditing =\n                                editingRow.taskIndex === taskIndex &&\n                                editingRow.subtaskIndex === subIndex;\n\n                            return (\n                                <tr\n                                    key={`${taskIndex}-${subIndex}`}\n                                    className=\"hover-row\"\n                                >\n                                    <td>{subIndex === 0 ? taskItem.task : ''}</td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"text\"\n                                                value={subtask.subtask}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'subtask', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            subtask.subtask\n                                        )}\n                                    </td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"number\"\n                                                value={subtask.hours}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'hours', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            `${subtask.hours} hours`\n                                        )}\n                                    </td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"text\"\n                                                value={subtask.comments}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'comments', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            subtask.comments || 'N/A'\n                                        )}\n                                    </td>\n                                    <td className=\"edit-icon-cell\">\n                                        {isEditing ? (\n                                            <button\n                                                className=\"save-button\"\n                                                onClick={handleSave}\n                                            >\n                                                Save\n                                            </button>\n                                        ) : (\n                                            <span\n                                                className=\"edit-icon\"\n                                                onClick={() =>\n                                                    setEditingRow({\n                                                        taskIndex,\n                                                        subtaskIndex: subIndex,\n                                                    })\n                                                }\n                                            >\n                                                ✏️\n                                            </span>\n                                        )}\n                                    </td>\n                                </tr>\n                            );\n                        })\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ResultsTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}