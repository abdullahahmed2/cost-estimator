{"ast":null,"code":"var _jsxFileName = \"/Users/abdullahahmed/Desktop/Cost-Estimator/Frontend/src/ResultsTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { FaPencilAlt } from 'react-icons/fa'; // Import pencil icon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  projectData = {\n    tasks: [],\n    startDate: '',\n    endDate: ''\n  }\n}) {\n  _s();\n  const [tasks, setTasks] = useState(projectData.tasks || []);\n  const [editingRow, setEditingRow] = useState({});\n  const [hourlyRate, setHourlyRate] = useState('');\n  const [errors, setErrors] = useState({});\n  const [startDate, setStartDate] = useState(projectData.startDate || '');\n  const [endDate, setEndDate] = useState(projectData.endDate || '');\n\n  // Handle input changes during editing\n  const handleChange = (taskIndex, subtaskIndex, field, value) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n    setTasks(updatedTasks);\n  };\n\n  // Handle save action for a specific row\n  const handleSave = (taskIndex, subtaskIndex) => {\n    const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n    // Validate input\n    if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n      setErrors({\n        taskIndex,\n        subtaskIndex,\n        message: 'Subtask name cannot be empty, and hours must be a positive number.'\n      });\n      return;\n    }\n\n    // Clear errors and exit editing mode\n    setErrors({});\n    setEditingRow({});\n  };\n\n  // Calculate summary rows\n  const totalHours = tasks.reduce((sum, task) => sum + task.subtasks.reduce((subSum, subtask) => subSum + (parseFloat(subtask.hours) || 0), 0), 0);\n  const totalCost = totalHours * (parseFloat(hourlyRate) || 0);\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Project Task Details', 14, 20);\n    const tableData = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      tableData.push([task, '', '', '']);\n      subtasks.forEach(({\n        subtask,\n        hours,\n        comments\n      }) => {\n        tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n      });\n    });\n    tableData.push(['Total No. of Hours', '', `${totalHours} hours`, '']);\n    tableData.push(['Hourly Rate', '', `$${hourlyRate || 0}`, '']);\n    tableData.push(['Total Cost', '', `$${totalCost.toFixed(2)}`, '']);\n    autoTable(doc, {\n      head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n      body: tableData,\n      startY: 30,\n      margin: {\n        left: 14,\n        right: 14\n      },\n      headStyles: {\n        fillColor: [41, 128, 185],\n        textColor: 255\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      }\n    });\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const docContent = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      docContent.push(new Paragraph({\n        text: task,\n        heading: 'Heading2',\n        spacing: {\n          after: 200\n        }\n      }));\n      const subtaskRows = subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: subtask,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `${hours} hours`,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: comments || 'N/A',\n            alignment: 'center'\n          })]\n        })]\n      }));\n      const table = new Table({\n        rows: [new TableRow({\n          children: [new TableCell({\n            children: [new Paragraph({\n              text: 'Subtask',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Development Hours',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Comments',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          })]\n        }), ...subtaskRows],\n        width: {\n          size: 100,\n          type: 'pct'\n        }\n      });\n      docContent.push(table);\n    });\n    docContent.push(new Table({\n      rows: [new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: 'Total No. of Hours',\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `${totalHours} hours`,\n            alignment: 'center'\n          })]\n        })]\n      }), new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: 'Hourly Rate',\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `$${hourlyRate || 0}`,\n            alignment: 'center'\n          })]\n        })]\n      }), new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: 'Total Cost',\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `$${totalCost.toFixed(2)}`,\n            alignment: 'center'\n          })]\n        })]\n      })]\n    }));\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1',\n          spacing: {\n            after: 300\n          }\n        }), ...docContent]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-dates\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: e => setStartDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: e => setEndDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Development Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [tasks.map((taskItem, taskIndex) => taskItem.subtasks.map((subtask, subIndex) => {\n          const isEditing = editingRow.taskIndex === taskIndex && editingRow.subtaskIndex === subIndex;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            onMouseEnter: () => setEditingRow({\n              taskIndex,\n              subtaskIndex: subIndex\n            }),\n            onMouseLeave: () => setEditingRow({}),\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: subIndex === 0 ? taskItem.task : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: subtask.subtask,\n                onChange: e => handleChange(taskIndex, subIndex, 'subtask', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 45\n              }, this) : subtask.subtask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: subtask.hours,\n                onChange: e => handleChange(taskIndex, subIndex, 'hours', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 45\n              }, this) : `${subtask.hours} hours`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: subtask.comments,\n                onChange: e => handleChange(taskIndex, subIndex, 'comments', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 45\n              }, this) : subtask.comments || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: !isEditing && /*#__PURE__*/_jsxDEV(FaPencilAlt, {\n                onClick: () => setEditingRow({\n                  taskIndex,\n                  subtaskIndex: subIndex\n                }),\n                style: {\n                  cursor: 'pointer'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 37\n            }, this)]\n          }, `${taskIndex}-${subIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this);\n        })), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Total No. of Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${totalHours} hours`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Hourly Rate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: hourlyRate,\n              onChange: e => setHourlyRate(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Total Cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `$${totalCost.toFixed(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: exportToPDF,\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: exportToDOCX,\n        children: \"Export to DOCX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n}\n_s(ResultsTable, \"6fHf7PgVJ5ftZVrNW3I+SKty3zs=\");\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","useState","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","FaPencilAlt","jsxDEV","_jsxDEV","ResultsTable","projectData","tasks","startDate","endDate","_s","setTasks","editingRow","setEditingRow","hourlyRate","setHourlyRate","errors","setErrors","setStartDate","setEndDate","handleChange","taskIndex","subtaskIndex","field","value","updatedTasks","subtasks","handleSave","subtask","hours","isNaN","message","totalHours","reduce","sum","task","subSum","parseFloat","totalCost","exportToPDF","doc","text","tableData","forEach","push","comments","toFixed","head","body","startY","margin","left","right","headStyles","fillColor","textColor","alternateRowStyles","save","exportToDOCX","docContent","heading","spacing","after","subtaskRows","map","children","alignment","table","rows","bold","shading","fill","width","size","type","sections","toBlob","then","blob","className","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","taskItem","subIndex","isEditing","onMouseEnter","onMouseLeave","onClick","style","cursor","display","justifyContent","gap","_c","$RefreshReg$"],"sources":["/Users/abdullahahmed/Desktop/Cost-Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { FaPencilAlt } from 'react-icons/fa'; // Import pencil icon\n\nfunction ResultsTable({ projectData = { tasks: [], startDate: '', endDate: '' } }) {\n    const [tasks, setTasks] = useState(projectData.tasks || []);\n    const [editingRow, setEditingRow] = useState({});\n    const [hourlyRate, setHourlyRate] = useState('');\n    const [errors, setErrors] = useState({});\n    const [startDate, setStartDate] = useState(projectData.startDate || '');\n    const [endDate, setEndDate] = useState(projectData.endDate || '');\n\n    // Handle input changes during editing\n    const handleChange = (taskIndex, subtaskIndex, field, value) => {\n        const updatedTasks = [...tasks];\n        updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n        setTasks(updatedTasks);\n    };\n\n    // Handle save action for a specific row\n    const handleSave = (taskIndex, subtaskIndex) => {\n        const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n        // Validate input\n        if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n            setErrors({\n                taskIndex,\n                subtaskIndex,\n                message: 'Subtask name cannot be empty, and hours must be a positive number.',\n            });\n            return;\n        }\n\n        // Clear errors and exit editing mode\n        setErrors({});\n        setEditingRow({});\n    };\n\n    // Calculate summary rows\n    const totalHours = tasks.reduce(\n        (sum, task) =>\n            sum +\n            task.subtasks.reduce((subSum, subtask) => subSum + (parseFloat(subtask.hours) || 0), 0),\n        0\n    );\n    const totalCost = totalHours * (parseFloat(hourlyRate) || 0);\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.text('Project Task Details', 14, 20);\n\n        const tableData = [];\n        tasks.forEach(({ task, subtasks }) => {\n            tableData.push([task, '', '', '']);\n            subtasks.forEach(({ subtask, hours, comments }) => {\n                tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n            });\n        });\n\n        tableData.push(['Total No. of Hours', '', `${totalHours} hours`, '']);\n        tableData.push(['Hourly Rate', '', `$${hourlyRate || 0}`, '']);\n        tableData.push(['Total Cost', '', `$${totalCost.toFixed(2)}`, '']);\n\n        autoTable(doc, {\n            head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n            body: tableData,\n            startY: 30,\n            margin: { left: 14, right: 14 },\n            headStyles: { fillColor: [41, 128, 185], textColor: 255 },\n            alternateRowStyles: { fillColor: [240, 240, 240] },\n        });\n\n        doc.save('Project_Estimates.pdf');\n    };\n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const docContent = [];\n\n        tasks.forEach(({ task, subtasks }) => {\n            docContent.push(\n                new Paragraph({\n                    text: task,\n                    heading: 'Heading2',\n                    spacing: { after: 200 },\n                })\n            );\n\n            const subtaskRows = subtasks.map(({ subtask, hours, comments }) =>\n                new TableRow({\n                    children: [\n                        new TableCell({\n                            children: [new Paragraph({ text: subtask, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: `${hours} hours`, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: comments || 'N/A', alignment: 'center' })],\n                        }),\n                    ],\n                })\n            );\n\n            const table = new Table({\n                rows: [\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Subtask', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Development Hours', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Comments', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                        ],\n                    }),\n                    ...subtaskRows,\n                ],\n                width: { size: 100, type: 'pct' },\n            });\n\n            docContent.push(table);\n        });\n\n        docContent.push(\n            new Table({\n                rows: [\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Total No. of Hours', alignment: 'center' })],\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: `${totalHours} hours`, alignment: 'center' })],\n                            }),\n                        ],\n                    }),\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Hourly Rate', alignment: 'center' })],\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: `$${hourlyRate || 0}`, alignment: 'center' })],\n                            }),\n                        ],\n                    }),\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Total Cost', alignment: 'center' })],\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: `$${totalCost.toFixed(2)}`, alignment: 'center' })],\n                            }),\n                        ],\n                    }),\n                ],\n            })\n        );\n\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({\n                            text: 'Project Task Details',\n                            heading: 'Heading1',\n                            spacing: { after: 300 },\n                        }),\n                        ...docContent,\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div className=\"results-table\">\n            <div className=\"project-dates\">\n                <label>\n                    Start Date:\n                    <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n                </label>\n                <label>\n                    End Date:\n                    <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n                </label>\n            </div>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Subtask</th>\n                        <th>Development Hours</th>\n                        <th>Comments</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((taskItem, taskIndex) =>\n                        taskItem.subtasks.map((subtask, subIndex) => {\n                            const isEditing =\n                                editingRow.taskIndex === taskIndex &&\n                                editingRow.subtaskIndex === subIndex;\n\n                            return (\n                                <tr\n                                    key={`${taskIndex}-${subIndex}`}\n                                    onMouseEnter={() =>\n                                        setEditingRow({\n                                            taskIndex,\n                                            subtaskIndex: subIndex,\n                                        })\n                                    }\n                                    onMouseLeave={() => setEditingRow({})}\n                                >\n                                    <td>{subIndex === 0 ? taskItem.task : ''}</td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"text\"\n                                                value={subtask.subtask}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'subtask', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            subtask.subtask\n                                        )}\n                                    </td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"number\"\n                                                value={subtask.hours}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'hours', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            `${subtask.hours} hours`\n                                        )}\n                                    </td>\n                                    <td>\n                                        {isEditing ? (\n                                            <input\n                                                type=\"text\"\n                                                value={subtask.comments}\n                                                onChange={(e) =>\n                                                    handleChange(taskIndex, subIndex, 'comments', e.target.value)\n                                                }\n                                            />\n                                        ) : (\n                                            subtask.comments || 'N/A'\n                                        )}\n                                    </td>\n                                    <td>\n                                        {!isEditing && (\n                                            <FaPencilAlt\n                                                onClick={() =>\n                                                    setEditingRow({\n                                                        taskIndex,\n                                                        subtaskIndex: subIndex,\n                                                    })\n                                                }\n                                                style={{ cursor: 'pointer' }}\n                                            />\n                                        )}\n                                    </td>\n                                </tr>\n                            );\n                        })\n                    )}\n                    <tr>\n                        <td>Total No. of Hours</td>\n                        <td></td>\n                        <td>{`${totalHours} hours`}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>Hourly Rate</td>\n                        <td></td>\n                        <td>\n                            <input\n                                type=\"number\"\n                                value={hourlyRate}\n                                onChange={(e) => setHourlyRate(e.target.value)}\n                            />\n                        </td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>Total Cost</td>\n                        <td></td>\n                        <td>{`$${totalCost.toFixed(2)}`}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n                <button className=\"action-button\" onClick={exportToPDF}>\n                    Export to PDF\n                </button>\n                <button className=\"action-button\" onClick={exportToDOCX}>\n                    Export to DOCX\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultsTable;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,MAAM;AAC9E,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,YAAYA,CAAC;EAAEC,WAAW,GAAG;IAAEC,KAAK,EAAE,EAAE;IAAEC,SAAS,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EAC/E,MAAM,CAACH,KAAK,EAAEI,QAAQ,CAAC,GAAGnB,QAAQ,CAACc,WAAW,CAACC,KAAK,IAAI,EAAE,CAAC;EAC3D,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACwB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACgB,SAAS,EAAEU,YAAY,CAAC,GAAG1B,QAAQ,CAACc,WAAW,CAACE,SAAS,IAAI,EAAE,CAAC;EACvE,MAAM,CAACC,OAAO,EAAEU,UAAU,CAAC,GAAG3B,QAAQ,CAACc,WAAW,CAACG,OAAO,IAAI,EAAE,CAAC;;EAEjE;EACA,MAAMW,YAAY,GAAGA,CAACC,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC5D,MAAMC,YAAY,GAAG,CAAC,GAAGlB,KAAK,CAAC;IAC/BkB,YAAY,CAACJ,SAAS,CAAC,CAACK,QAAQ,CAACJ,YAAY,CAAC,CAACC,KAAK,CAAC,GAAGC,KAAK;IAC7Db,QAAQ,CAACc,YAAY,CAAC;EAC1B,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAACN,SAAS,EAAEC,YAAY,KAAK;IAC5C,MAAMM,OAAO,GAAGrB,KAAK,CAACc,SAAS,CAAC,CAACK,QAAQ,CAACJ,YAAY,CAAC;;IAEvD;IACA,IAAI,CAACM,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACC,KAAK,IAAI,CAAC,IAAIC,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC,EAAE;MAChEZ,SAAS,CAAC;QACNI,SAAS;QACTC,YAAY;QACZS,OAAO,EAAE;MACb,CAAC,CAAC;MACF;IACJ;;IAEA;IACAd,SAAS,CAAC,CAAC,CAAC,CAAC;IACbJ,aAAa,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;;EAED;EACA,MAAMmB,UAAU,GAAGzB,KAAK,CAAC0B,MAAM,CAC3B,CAACC,GAAG,EAAEC,IAAI,KACND,GAAG,GACHC,IAAI,CAACT,QAAQ,CAACO,MAAM,CAAC,CAACG,MAAM,EAAER,OAAO,KAAKQ,MAAM,IAAIC,UAAU,CAACT,OAAO,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAC3F,CACJ,CAAC;EACD,MAAMS,SAAS,GAAGN,UAAU,IAAIK,UAAU,CAACvB,UAAU,CAAC,IAAI,CAAC,CAAC;;EAE5D;EACA,MAAMyB,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,GAAG,GAAG,IAAI/C,KAAK,CAAC,CAAC;IACvB+C,GAAG,CAACC,IAAI,CAAC,sBAAsB,EAAE,EAAE,EAAE,EAAE,CAAC;IAExC,MAAMC,SAAS,GAAG,EAAE;IACpBnC,KAAK,CAACoC,OAAO,CAAC,CAAC;MAAER,IAAI;MAAET;IAAS,CAAC,KAAK;MAClCgB,SAAS,CAACE,IAAI,CAAC,CAACT,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;MAClCT,QAAQ,CAACiB,OAAO,CAAC,CAAC;QAAEf,OAAO;QAAEC,KAAK;QAAEgB;MAAS,CAAC,KAAK;QAC/CH,SAAS,CAACE,IAAI,CAAC,CAAC,EAAE,EAAEhB,OAAO,EAAE,GAAGC,KAAK,QAAQ,EAAEgB,QAAQ,IAAI,KAAK,CAAC,CAAC;MACtE,CAAC,CAAC;IACN,CAAC,CAAC;IAEFH,SAAS,CAACE,IAAI,CAAC,CAAC,oBAAoB,EAAE,EAAE,EAAE,GAAGZ,UAAU,QAAQ,EAAE,EAAE,CAAC,CAAC;IACrEU,SAAS,CAACE,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI9B,UAAU,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D4B,SAAS,CAACE,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,EAAE,IAAIN,SAAS,CAACQ,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAElEpD,SAAS,CAAC8C,GAAG,EAAE;MACXO,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAAC;MAC5DC,IAAI,EAAEN,SAAS;MACfO,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC;MAC/BC,UAAU,EAAE;QAAEC,SAAS,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;QAAEC,SAAS,EAAE;MAAI,CAAC;MACzDC,kBAAkB,EAAE;QAAEF,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;MAAE;IACrD,CAAC,CAAC;IAEFd,GAAG,CAACiB,IAAI,CAAC,uBAAuB,CAAC;EACrC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,UAAU,GAAG,EAAE;IAErBpD,KAAK,CAACoC,OAAO,CAAC,CAAC;MAAER,IAAI;MAAET;IAAS,CAAC,KAAK;MAClCiC,UAAU,CAACf,IAAI,CACX,IAAI/C,SAAS,CAAC;QACV4C,IAAI,EAAEN,IAAI;QACVyB,OAAO,EAAE,UAAU;QACnBC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAC1B,CAAC,CACL,CAAC;MAED,MAAMC,WAAW,GAAGrC,QAAQ,CAACsC,GAAG,CAAC,CAAC;QAAEpC,OAAO;QAAEC,KAAK;QAAEgB;MAAS,CAAC,KAC1D,IAAI7C,QAAQ,CAAC;QACTiE,QAAQ,EAAE,CACN,IAAIlE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAEb,OAAO;YAAEsC,SAAS,EAAE;UAAS,CAAC,CAAC;QACpE,CAAC,CAAC,EACF,IAAInE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,GAAGZ,KAAK,QAAQ;YAAEqC,SAAS,EAAE;UAAS,CAAC,CAAC;QAC7E,CAAC,CAAC,EACF,IAAInE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAEI,QAAQ,IAAI,KAAK;YAAEqB,SAAS,EAAE;UAAS,CAAC,CAAC;QAC9E,CAAC,CAAC;MAEV,CAAC,CACL,CAAC;MAED,MAAMC,KAAK,GAAG,IAAIrE,KAAK,CAAC;QACpBsE,IAAI,EAAE,CACF,IAAIpE,QAAQ,CAAC;UACTiE,QAAQ,EAAE,CACN,IAAIlE,SAAS,CAAC;YACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;cAAE4C,IAAI,EAAE,SAAS;cAAE4B,IAAI,EAAE,IAAI;cAAEH,SAAS,EAAE;YAAS,CAAC,CAAC,CAAC;YAC/EI,OAAO,EAAE;cAAEC,IAAI,EAAE;YAAS;UAC9B,CAAC,CAAC,EACF,IAAIxE,SAAS,CAAC;YACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;cAAE4C,IAAI,EAAE,mBAAmB;cAAE4B,IAAI,EAAE,IAAI;cAAEH,SAAS,EAAE;YAAS,CAAC,CAAC,CAAC;YACzFI,OAAO,EAAE;cAAEC,IAAI,EAAE;YAAS;UAC9B,CAAC,CAAC,EACF,IAAIxE,SAAS,CAAC;YACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;cAAE4C,IAAI,EAAE,UAAU;cAAE4B,IAAI,EAAE,IAAI;cAAEH,SAAS,EAAE;YAAS,CAAC,CAAC,CAAC;YAChFI,OAAO,EAAE;cAAEC,IAAI,EAAE;YAAS;UAC9B,CAAC,CAAC;QAEV,CAAC,CAAC,EACF,GAAGR,WAAW,CACjB;QACDS,KAAK,EAAE;UAAEC,IAAI,EAAE,GAAG;UAAEC,IAAI,EAAE;QAAM;MACpC,CAAC,CAAC;MAEFf,UAAU,CAACf,IAAI,CAACuB,KAAK,CAAC;IAC1B,CAAC,CAAC;IAEFR,UAAU,CAACf,IAAI,CACX,IAAI9C,KAAK,CAAC;MACNsE,IAAI,EAAE,CACF,IAAIpE,QAAQ,CAAC;QACTiE,QAAQ,EAAE,CACN,IAAIlE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,oBAAoB;YAAEyB,SAAS,EAAE;UAAS,CAAC,CAAC;QACjF,CAAC,CAAC,EACF,IAAInE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,GAAGT,UAAU,QAAQ;YAAEkC,SAAS,EAAE;UAAS,CAAC,CAAC;QAClF,CAAC,CAAC;MAEV,CAAC,CAAC,EACF,IAAIlE,QAAQ,CAAC;QACTiE,QAAQ,EAAE,CACN,IAAIlE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,aAAa;YAAEyB,SAAS,EAAE;UAAS,CAAC,CAAC;QAC1E,CAAC,CAAC,EACF,IAAInE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,IAAI3B,UAAU,IAAI,CAAC,EAAE;YAAEoD,SAAS,EAAE;UAAS,CAAC,CAAC;QAClF,CAAC,CAAC;MAEV,CAAC,CAAC,EACF,IAAIlE,QAAQ,CAAC;QACTiE,QAAQ,EAAE,CACN,IAAIlE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,YAAY;YAAEyB,SAAS,EAAE;UAAS,CAAC,CAAC;QACzE,CAAC,CAAC,EACF,IAAInE,SAAS,CAAC;UACVkE,QAAQ,EAAE,CAAC,IAAIpE,SAAS,CAAC;YAAE4C,IAAI,EAAE,IAAIH,SAAS,CAACQ,OAAO,CAAC,CAAC,CAAC,EAAE;YAAEoB,SAAS,EAAE;UAAS,CAAC,CAAC;QACvF,CAAC,CAAC;MAEV,CAAC,CAAC;IAEV,CAAC,CACL,CAAC;IAED,MAAM1B,GAAG,GAAG,IAAI7C,QAAQ,CAAC;MACrBgF,QAAQ,EAAE,CACN;QACIV,QAAQ,EAAE,CACN,IAAIpE,SAAS,CAAC;UACV4C,IAAI,EAAE,sBAAsB;UAC5BmB,OAAO,EAAE,UAAU;UACnBC,OAAO,EAAE;YAAEC,KAAK,EAAE;UAAI;QAC1B,CAAC,CAAC,EACF,GAAGH,UAAU;MAErB,CAAC;IAET,CAAC,CAAC;IAEF/D,MAAM,CAACgF,MAAM,CAACpC,GAAG,CAAC,CAACqC,IAAI,CAAEC,IAAI,IAAK;MAC9B7E,MAAM,CAAC6E,IAAI,EAAE,wBAAwB,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;EAED,oBACI1E,OAAA;IAAK2E,SAAS,EAAC,eAAe;IAAAd,QAAA,gBAC1B7D,OAAA;MAAK2E,SAAS,EAAC,eAAe;MAAAd,QAAA,gBAC1B7D,OAAA;QAAA6D,QAAA,GAAO,aAEH,eAAA7D,OAAA;UAAOsE,IAAI,EAAC,MAAM;UAAClD,KAAK,EAAEhB,SAAU;UAACwE,QAAQ,EAAGC,CAAC,IAAK/D,YAAY,CAAC+D,CAAC,CAACC,MAAM,CAAC1D,KAAK;QAAE;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnF,CAAC,eACRlF,OAAA;QAAA6D,QAAA,GAAO,WAEH,eAAA7D,OAAA;UAAOsE,IAAI,EAAC,MAAM;UAAClD,KAAK,EAAEf,OAAQ;UAACuE,QAAQ,EAAGC,CAAC,IAAK9D,UAAU,CAAC8D,CAAC,CAACC,MAAM,CAAC1D,KAAK;QAAE;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eAENlF,OAAA;MAAA6D,QAAA,gBACI7D,OAAA;QAAA6D,QAAA,eACI7D,OAAA;UAAA6D,QAAA,gBACI7D,OAAA;YAAA6D,QAAA,EAAI;UAAI;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACblF,OAAA;YAAA6D,QAAA,EAAI;UAAO;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChBlF,OAAA;YAAA6D,QAAA,EAAI;UAAiB;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BlF,OAAA;YAAA6D,QAAA,EAAI;UAAQ;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBlF,OAAA;YAAA6D,QAAA,EAAI;UAAO;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRlF,OAAA;QAAA6D,QAAA,GACK1D,KAAK,CAACyD,GAAG,CAAC,CAACuB,QAAQ,EAAElE,SAAS,KAC3BkE,QAAQ,CAAC7D,QAAQ,CAACsC,GAAG,CAAC,CAACpC,OAAO,EAAE4D,QAAQ,KAAK;UACzC,MAAMC,SAAS,GACX7E,UAAU,CAACS,SAAS,KAAKA,SAAS,IAClCT,UAAU,CAACU,YAAY,KAAKkE,QAAQ;UAExC,oBACIpF,OAAA;YAEIsF,YAAY,EAAEA,CAAA,KACV7E,aAAa,CAAC;cACVQ,SAAS;cACTC,YAAY,EAAEkE;YAClB,CAAC,CACJ;YACDG,YAAY,EAAEA,CAAA,KAAM9E,aAAa,CAAC,CAAC,CAAC,CAAE;YAAAoD,QAAA,gBAEtC7D,OAAA;cAAA6D,QAAA,EAAKuB,QAAQ,KAAK,CAAC,GAAGD,QAAQ,CAACpD,IAAI,GAAG;YAAE;cAAAgD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC9ClF,OAAA;cAAA6D,QAAA,EACKwB,SAAS,gBACNrF,OAAA;gBACIsE,IAAI,EAAC,MAAM;gBACXlD,KAAK,EAAEI,OAAO,CAACA,OAAQ;gBACvBoD,QAAQ,EAAGC,CAAC,IACR7D,YAAY,CAACC,SAAS,EAAEmE,QAAQ,EAAE,SAAS,EAAEP,CAAC,CAACC,MAAM,CAAC1D,KAAK;cAC9D;gBAAA2D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,GAEF1D,OAAO,CAACA;YACX;cAAAuD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eACLlF,OAAA;cAAA6D,QAAA,EACKwB,SAAS,gBACNrF,OAAA;gBACIsE,IAAI,EAAC,QAAQ;gBACblD,KAAK,EAAEI,OAAO,CAACC,KAAM;gBACrBmD,QAAQ,EAAGC,CAAC,IACR7D,YAAY,CAACC,SAAS,EAAEmE,QAAQ,EAAE,OAAO,EAAEP,CAAC,CAACC,MAAM,CAAC1D,KAAK;cAC5D;gBAAA2D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,GAEF,GAAG1D,OAAO,CAACC,KAAK;YACnB;cAAAsD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eACLlF,OAAA;cAAA6D,QAAA,EACKwB,SAAS,gBACNrF,OAAA;gBACIsE,IAAI,EAAC,MAAM;gBACXlD,KAAK,EAAEI,OAAO,CAACiB,QAAS;gBACxBmC,QAAQ,EAAGC,CAAC,IACR7D,YAAY,CAACC,SAAS,EAAEmE,QAAQ,EAAE,UAAU,EAAEP,CAAC,CAACC,MAAM,CAAC1D,KAAK;cAC/D;gBAAA2D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CAAC,GAEF1D,OAAO,CAACiB,QAAQ,IAAI;YACvB;cAAAsC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eACLlF,OAAA;cAAA6D,QAAA,EACK,CAACwB,SAAS,iBACPrF,OAAA,CAACF,WAAW;gBACR0F,OAAO,EAAEA,CAAA,KACL/E,aAAa,CAAC;kBACVQ,SAAS;kBACTC,YAAY,EAAEkE;gBAClB,CAAC,CACJ;gBACDK,KAAK,EAAE;kBAAEC,MAAM,EAAE;gBAAU;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChC;YACJ;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA,GA7DA,GAAGjE,SAAS,IAAImE,QAAQ,EAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA8D/B,CAAC;QAEb,CAAC,CACL,CAAC,eACDlF,OAAA;UAAA6D,QAAA,gBACI7D,OAAA;YAAA6D,QAAA,EAAI;UAAkB;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3BlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA6D,QAAA,EAAK,GAAGjC,UAAU;UAAQ;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAChClF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACLlF,OAAA;UAAA6D,QAAA,gBACI7D,OAAA;YAAA6D,QAAA,EAAI;UAAW;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA6D,QAAA,eACI7D,OAAA;cACIsE,IAAI,EAAC,QAAQ;cACblD,KAAK,EAAEV,UAAW;cAClBkE,QAAQ,EAAGC,CAAC,IAAKlE,aAAa,CAACkE,CAAC,CAACC,MAAM,CAAC1D,KAAK;YAAE;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACLlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACLlF,OAAA;UAAA6D,QAAA,gBACI7D,OAAA;YAAA6D,QAAA,EAAI;UAAU;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnBlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA6D,QAAA,EAAK,IAAI3B,SAAS,CAACQ,OAAO,CAAC,CAAC,CAAC;UAAE;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACrClF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlF,OAAA;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACRlF,OAAA;MAAK2E,SAAS,EAAC,SAAS;MAACc,KAAK,EAAE;QAAEE,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,UAAU;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAhC,QAAA,gBACzF7D,OAAA;QAAQ2E,SAAS,EAAC,eAAe;QAACa,OAAO,EAAErD,WAAY;QAAA0B,QAAA,EAAC;MAExD;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlF,OAAA;QAAQ2E,SAAS,EAAC,eAAe;QAACa,OAAO,EAAElC,YAAa;QAAAO,QAAA,EAAC;MAEzD;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC5E,EAAA,CAjUQL,YAAY;AAAA6F,EAAA,GAAZ7F,YAAY;AAmUrB,eAAeA,YAAY;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}